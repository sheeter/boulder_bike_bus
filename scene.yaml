import:
    # - https://raw.githubusercontent.com/sensescape/xyz-studio-dark/master/scene.yaml
    # - https://raw.githubusercontent.com/sensescape/xyz-pixel-dark/master/scene.yaml
    - https://raw.githubusercontent.com/sensescape/xyz-pixel/master/scene.yaml
    # - https://www.nextzen.org/carto/walkabout-style/walkabout-style.zip
    # - https://raw.githubusercontent.com/sensescape/xyz-pixel-pastel/master/scene.yaml
    # - https://www.nextzen.org/carto/refill-style/refill-style.zip
    # - https://www.nextzen.org/carto/refill-style/themes/color-gray-gold.zip
    # # - https://www.nextzen.org/carto/refill-style/themes/color-inverted.zip
    # - https://s3.amazonaws.com/xyz-demo/data/demo.yaml
    # - https://www.nextzen.org/carto/refill-style/11/themes/label-4.zip
    # # - https://www.nextzen.org/carto/refill-style/themes/terrain-shading.zip
    # - https://www.nextzen.org/carto/refill-style/11/themes/terrain-shading-dark.zip

global:
    block_line: 50
    block: 49
    point_zoom: 14
    titlecase: |
        function toTitleCase(str) {
          return str.replace(
            /\w\S*/g,
            function(txt) {
              return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
            }
          );
        }

sources:
    mapzen:
        type: MVT
        url: https://tile.nextzen.org/tilezen/vector/v1/all/{z}/{x}/{y}.mvt
        url_params: 
            api_key: FTYsIM6IQpC4nFOM2S6LpQ
    _routes:
        type: GeoJSON
        url: https://raw.githubusercontent.com/sheeter/boulder_bike_bus/main/routes.geojson
    _schools:
        type: GeoJSON
        url: https://raw.githubusercontent.com/sheeter/boulder_bike_bus/main/schools.geojson
    _satellite:
        url: https://api.maptiler.com/tiles/satellite-v2/{z}/{x}/{y}.jpg
        type: Raster
        url_params: 
            key: getyourfreekeyfrommaptiler

styles:
    _polygons:
        base: polygons
        blend: inlay
        blend_order: 0
    _points:
        base: points
        blend: overlay
        blend_order: 1
    _text:
        base: text
        blend: overlay
        blend_order: 11
    _lines:
        base: lines
        blend: inlay
        blend_order: 0
    _lines_low:
        base: lines
        blend: inlay
        blend_order: -2
    _polygons_inlay:
        base: polygons
        blend: inlay
        blend_order: 0
    _polygons_overlay:
        base: polygons
        blend: overlay
        blend_order: 1
    _ants:
        base: lines
        blend: inlay
        blend_order: 0
        texcoords: true
        animated: true
        shaders:
            blocks:
                color: |
                    color.a = step(.2,fract(u_time-v_texcoord.y*.45));

    _arrows:
        base: lines
        blend: overlay
        texcoords: true
        animated: true
        texture: https://burritojustice.github.io/valencia_bikeway/images/bus.png
        shaders:
            global:
                float shape(vec2 st, int N){
                    st = st *2.-1.;
                    float a = atan(st.x,st.y)+PI;
                    float r = TWO_PI/float(N);
                    return cos(floor(.5+a/r)*r-a)*length(st);
                }
            blocks:
                color: |
                    color.a = step(.5,fract(u_time-v_texcoord.y*.5));
                    

layers:
    
    # places:
    #     enabled: false
    # buildings:
    #     enabled: false
    
    _schools:
        data: {source: _schools}
        # filter: {$zoom: {min: 17}}
        draw:
            points:
                color: |
                    function(){
                        var color = 'red'
                        if (feature.type.includes("pre")){
                            color = 'white'
                            }
                        if (feature.type == 'elementary'){
                            color = 'yellow'
                            }
                        if (feature.type == 'middle'){
                            color = 'orange'
                            }
                        return color
                        }
                # color: red
                size: 10px
                order: 1000
                outline:
                    color: |
                        function(){
                            var color = 'black'
                            if (feature.jurisdiction == 'private'){
                                color = 'aqua'
                                }
                            return color
                            }
                    # color: grey
                    width: 1.5px          
                text:
                    optional: true
                    text_source: school_name
                    font:
                        fill: white
                        size: [[18,12px],[19,16px]]
                        stroke:
                            color: black
                            width: 3px           


    _routes:
        # enabled: false
        data: {source: _routes}
        draw:
            _ants: 
                color: |
                    function(){
                        return feature.stroke
                        }
                # color: black
                # here you can either specify a CSS / RBG / HSL color, or use a geojson property, or use a function to generate one.
                # but this is an edge case -- the hex color from geojson.io starts with a # which causes issues as that's a comment in yaml
                # but running it through a function makes things happy
                width: [[14,2px],[18,8px]]
                order: 1000
            _lines: 
                color: white
                width: [[14,2px],[18,8px]]
                order: 1000
        labels:
            filter: {$zoom: {min: 14}}
            draw:
                text:
                    # optional: true
                    # text_source: name
                    font:
                        fill: black
                        size: [[18,12px],[19,16px]]
                        stroke:
                            color: white
                            width: 3px 
                
        _primary_ants:
            filter: {01type: primary}
            # here we are filtering just primary roads to show as ants
            draw:
                _ants:
                    color: function(){return feature.stroke}
                    width: [[14,2px],[18,8px]]
                    order: 1001
                _lines: 
                    color: white
                    width: [[14,2px],[18,8px]]
                    order: 1001
        
        _two_way:
            # enabled: false
            # just leaving this in here for reference if you want to do conditional styling

            filter: {direction: two-way}
            draw:
                lines:
                    # color: [.5,.5,.5,0.75]
                    # color: [.8,.8,.8,0.3]
                    color: |
                        function(){
                            var color = "black"
                            if (feature.bike){ // this is the geojson property
                                color = 'green'
                                }
                            if (feature.SFMTA){
                                color = 'red'
                                }
                            return color
                            }
                    # color: red
                    width: [[14,.1px],[16,2px],[18,5px]]
                    order: 1001
  

# you'll need to provde your own key from maptiler to use satellite tiles -- though I wouldn't in this case because it will make the routes hard to see
#     _satellite:
#         data: {source: _satellite}
#         draw:
#             raster:
#                 order: 999 # draw on bottom
